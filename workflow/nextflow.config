
params{
    myConda = "/home/nguinkal/AMRFLOW/Miniconda3/envs"
   //baseDir = "${System.getProperty('user.dir')}"
   // $baseDir will not work because results are written $HOME/AMRFLOW in the host computer
    reads = "/home/rudel/github/amr-ngs-pipeline/data/test" 
    pattern="$params.reads/SRR*_{1,2}.fastq"
    organism = "Staphylococcus_aureus"
    results = "/home/nguinkal/AMRFLOW/amr"  
    scheme = "saureus"
    kraken = "/home/nguinkal/AMRFLOW/AQUAMIS/reference_db/kraken"
    taxonkit = "/home/nguinkal/AMRFLOW/AQUAMIS/reference_db/taxonkit"
    mash = "/home/nguinkal/AMRFLOW/AQUAMIS/reference_db/mash/mashDB.msh"
    mode = false

}

process{

    withName: FASTQC{
        conda = "${params.myConda}/fastqc"
        cpus = 4
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 1
        time = '6h'

    }
    withName: AQUAMIS{
        conda = "${params.myConda}/aquamis"
        cpus = 4
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 1
        time = '6h'

    }
    withName: TORMES{
        conda = "${params.myConda}/tormes"
        cpus = 4
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 1
        time = '6h'

    }
    withName: AMRFINDER{
        conda = "${params.myConda}/amrfinder"
        cpus = 4
        memory = {4.GB * task.attempt}
       // errorStrategy = 'workflow/nextflow.confiretry'
        errorStrategy = 'retry'
        maxRetries = 1
        time = '6h'

    }
    withName: STARAMR{
        conda = "${params.myConda}/staramr"
        cpus = 4
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 1
       time = '6h'

    }
}

trace {
    enabled = true
    file = 'trace.tsv'
    fields = 'task_id, hash, native_id, name, status, attempt, exit, realtime, cpus, %cpu, memory, %mem, rss, vmem, peak_rss, peak_vmem'
    overwrite = true
}
timeline{
    enabled = true
    file = 'timeline.html'
    overwrite = true
}

conda.enabled = true