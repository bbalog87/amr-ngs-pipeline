
myConda = '/home/rudel/miniconda3/envs'

params{
    results = "$baseDir/amr"
    fastqs = "/home/rudel/github/amr-ngs-pipeline/data/test/SRR*_{1,2}.fastq" 
    kraken = "/home/rudel/github/amr-ngs-pipeline/workflow/AQUAMIS/reference_db/kraken"
    taxonkit = "/home/rudel/github/amr-ngs-pipeline/workflow/AQUAMIS/reference_db/taxonkit"
    mash = "/home/rudel/github/amr-ngs-pipeline/workflow/AQUAMIS/reference_db/mash/mashDB.msh"
}

process{

    withName: FASTQC{
        conda = "${myConda}/fastqc"
        cpus = 4
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 1
        time = '6h'

    }
    withName: AQUAMIS{
        conda = "${myConda}/aquamis"
        cpus = 4
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 1
        time = '6h'

    }
    withName: TORMES{
        conda = "${myConda}/tormes"
        cpus = 4
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 1
        time = '6h'

    }
    withName: AMRFINDER{
        conda = "${myConda}/amrfinder"
        cpus = 4
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 1
        time = '6h'

    }
    withName: STARAMR{
        conda = "${myConda}/staramr"
        cpus = 4
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 1
        time = '6h'

    }
}

trace {
    enabled = true
    file = 'trace.tsv'
    fields = 'task_id, hash, native_id, name, status, attempt, exit, realtime, cpus, %cpu, memory, %mem, rss, vmem, peak_rss, peak_vmem'
    overwrite = true
}
timeline{
    enabled = true
    file = 'timeline.html'
    overwrite = true
}

conda.enabled = true